{"version":3,"sources":["build.js"],"names":["global","factory","exports","module","define","amd","THREE_GPU_ParticleSystem","CORNERS_","POSITION_START_TIME_IDX","singleParticleArray_","Float32Array","ParticleSpec","numParticles","numFrames","frameDuration","frameStart","frameStartRange","timeRange","startTime","lifeTime","lifeTimeRange","startSize","startSizeRange","endSize","endSizeRange","position","positionRange","velocity","velocityRange","acceleration","accelerationRange","spinStart","spinStartRange","spinSpeed","spinSpeedRange","colorMult","colorMultRange","worldVelocity","worldAcceleration","billboard","orientation","OneShot","emitter","scene","THREE","Mesh","call","emitter_","clone","world_","Matrix4","tempWorld_","timeOffset_","visible_","particleSystem","idx","drawables_","indexOf","splice","push","prototype","Object","create","constructor","trigger","opt_world","add","copy","Vector3","fromArray","timeSource_","draw","world","viewProjection","timeOffset","ParticleEmitter","opt_texture","opt_clock","particleBuffer_","InstancedBufferGeometry","interleavedBuffer","InterleavedBuffer","numParticles_","rampTexture_","defaultRampTexture","colorTexture_","defaultColorTexture","setState","NormalBlending","Trail","maxParticles","parameters","opt_perParticleParamSetter","allocateParticles_","validateParameters","perParticleParamSetter","birthIndex_","maxParticles_","setTranslation","x","y","z","stateId","blendFunc_","setColorRamp","colorRamp","width","length","createTextureFromFloats","defaults","key","createParticles_","firstParticleIndex","interleaveBufferData","array","billboard_","random","randomFunction_","plusMinus","range","plusMinusVector","v","ii","pLifeTime","pStartTime","pFrameStart","pPosition","addVectors","pVelocity","pAcceleration","pColorMult","Vector4","pSpinStart","pSpinSpeed","pStartSize","pEndSize","pOrientation","jj","offset0","offset1","offset2","offset3","w","needsUpdate","material","uniforms","value","rampSampler","colorSampler","blending","numIndices","BufferGeometry","MaxIndex","vertexBuffer","positions","InterleavedBufferAttribute","addAttribute","uvs","indices","Uint16Array","setIndex","BufferAttribute","InstancedInterleavedBuffer","byteLength","setDynamic","boundingSphere","Sphere","viewInverse","type","camera","matrixWorld","time","ShaderMaterial","vertexShader","fragmentShader","side","DoubleSide","FrontSide","depthTest","depthWrite","transparent","geometry","setParameters","createOneShot","object","undefined","createParticleEmitter","birthParticles","numParticlesToEnd","ParticleSystem","opt_randomFunction","pixelBase","pixels","yy","xx","pixel","colorTexture","rampTexture","now_","Date","timeBase_","now","base","getTime","Math","height","texture","data","t","Uint8Array","i","DataTexture","RGBAFormat","minFilter","LinearFilter","magFilter","createTrail","trail"],"mappings":"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","file":"threejs-gpu-particle-system.js","sourceRoot":"..\\src\\js","sourcesContent":["(function (global, factory) {\r\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\r\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\r\n\t(factory((global.THREE_GPU_ParticleSystem = {})));\r\n}(this, (function (exports) { 'use strict';\r\n\r\n\t// source: https://github.com/greggman/tdl/blob/master/tdl/particles.js\r\n\t// ported to three.js by fazeaction\r\n\r\n\tvar CORNERS_ = [\r\n\r\n\t\t[ - 0.5, - 0.5 ],\r\n\t\t[ + 0.5, - 0.5 ],\r\n\t\t[ + 0.5, + 0.5 ],\r\n\t\t[ - 0.5, + 0.5 ]\r\n\r\n\t];\r\n\r\n\tfunction createDefaultClock_ ( particleSystem ) {\r\n\r\n\t\treturn function () {\r\n\r\n\t\t\tvar now = particleSystem.now_;\r\n\t\t\tvar base = particleSystem.timeBase_;\r\n\r\n\t\t\treturn ( now.getTime() - base.getTime() ) / 1000.0;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar POSITION_START_TIME_IDX = 0;\r\n\tvar UV_LIFE_TIME_FRAME_START_IDX = 4;\r\n\tvar VELOCITY_START_SIZE_IDX = 8;\r\n\tvar ACCELERATION_END_SIZE_IDX = 12;\r\n\tvar SPIN_START_SPIN_SPEED_IDX = 16;\r\n\tvar ORIENTATION_IDX = 20;\r\n\tvar COLOR_MULT_IDX = 24;\r\n\tvar LAST_IDX = 28;\r\n\tvar singleParticleArray_ = new Float32Array( 4 * LAST_IDX );\r\n\r\n\t// source: https://github.com/greggman/tdl/blob/master/tdl/particles.js\r\n\t// ported to three.js by fazeaction\r\n\r\n\tfunction ParticleSpec () {\r\n\r\n\t\tthis.numParticles = 1;\r\n\r\n\t\tthis.numFrames = 1;\r\n\r\n\t\tthis.frameDuration = 1;\r\n\r\n\t\tthis.frameStart = 0;\r\n\r\n\t\tthis.frameStartRange = 0;\r\n\r\n\t\tthis.timeRange = 99999999;\r\n\r\n\t\tthis.startTime = null;\r\n\r\n\t\tthis.lifeTime = 1;\r\n\r\n\t\tthis.lifeTimeRange = 0;\r\n\r\n\t\tthis.startSize = 1;\r\n\r\n\t\tthis.startSizeRange = 0;\r\n\r\n\t\tthis.endSize = 1;\r\n\r\n\t\tthis.endSizeRange = 0;\r\n\r\n\t\tthis.position = [ 0, 0, 0 ];\r\n\r\n\t\tthis.positionRange = [ 0, 0, 0 ];\r\n\r\n\t\tthis.velocity = [ 0, 0, 0 ];\r\n\r\n\t\tthis.velocityRange = [ 0, 0, 0 ];\r\n\r\n\t\tthis.acceleration = [ 0, 0, 0 ];\r\n\r\n\t\tthis.accelerationRange = [ 0, 0, 0 ];\r\n\r\n\t\tthis.spinStart = 0;\r\n\r\n\t\tthis.spinStartRange = 0;\r\n\r\n\t\tthis.spinSpeed = 0;\r\n\r\n\t\tthis.spinSpeedRange = 0;\r\n\r\n\t\tthis.colorMult = [ 1, 1, 1, 1 ];\r\n\r\n\t\tthis.colorMultRange = [ 0, 0, 0, 0 ];\r\n\r\n\t\tthis.worldVelocity = [ 0, 0, 0 ];\r\n\r\n\t\tthis.worldAcceleration = [ 0, 0, 0 ];\r\n\r\n\t\tthis.billboard = true;\r\n\r\n\t\tthis.orientation = [ 0, 0, 0, 1 ];\r\n\r\n\t}\r\n\r\n\t// source: https://github.com/greggman/tdl/blob/master/tdl/particles.js\r\n\t// ported to three.js by fazeaction\r\n\r\n\tfunction OneShot( emitter, scene ) {\r\n\r\n\t\tTHREE.Mesh.call( this );\r\n\t\tthis.emitter_ = emitter.clone();\r\n\t\tthis.scene = scene;\r\n\r\n\t\tthis.world_ = new THREE.Matrix4();\r\n\t\tthis.tempWorld_ = new THREE.Matrix4();\r\n\t\tthis.timeOffset_ = 0;\r\n\t\tthis.visible_ = false;\r\n\r\n\t\t// Remove the parent emitter from the particle system's drawable\r\n\t\t// list (if it's still there) and add ourselves instead.\r\n\t\tvar particleSystem = emitter.particleSystem;\r\n\t\tvar idx = particleSystem.drawables_.indexOf( this.emitter_ );\r\n\t\tif ( idx >= 0 ) {\r\n\r\n\t\t\tparticleSystem.drawables_.splice( idx, 1 );\r\n\r\n\t\t}\r\n\r\n\t\tparticleSystem.drawables_.push( this );\r\n\r\n\t}\r\n\r\n\tOneShot.prototype = Object.create( THREE.Mesh.prototype );\r\n\r\n\tOneShot.prototype.constructor = OneShot;\r\n\r\n\r\n\tOneShot.prototype.trigger = function ( opt_world ) {\r\n\r\n\t\tif ( ! this.visible_ ) {\r\n\r\n\t\t\tthis.scene.add( this.emitter_ );\r\n\r\n\t\t}\r\n\t\tif ( opt_world ) {\r\n\r\n\t        this.emitter_.position.copy( new THREE.Vector3().fromArray( opt_world ) );\r\n\r\n\t\t}\r\n\t\tthis.visible_ = true;\r\n\t\tthis.timeOffset_ = this.emitter_.timeSource_();\r\n\r\n\t};\r\n\r\n\tOneShot.prototype.draw = function ( world, viewProjection, timeOffset ) {\r\n\r\n\t\tif ( this.visible_ ) {\r\n\r\n\t\t\t//this.tempWorld_.multiplyMatrices(this.world_, world);\r\n\t\t\tthis.emitter_.draw( this.world_, viewProjection, this.timeOffset_ );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tvar billboardParticleInstancedVertexShader = \"// source: https://github.com/greggman/tdl/blob/master/tdl/particles.js#L154\\r\\n\\r\\nuniform mat4 viewInverse;\\r\\nuniform vec3 worldVelocity;\\r\\nuniform vec3 worldAcceleration;\\r\\nuniform float timeRange;\\r\\nuniform float time;\\r\\nuniform float timeOffset;\\r\\nuniform float frameDuration;\\r\\nuniform float numFrames;\\r\\n\\r\\n// Incoming vertex attributes\\r\\nattribute vec4 uvLifeTimeFrameStart;\\r\\nattribute float startTime;\\r\\nattribute vec4 velocityStartSize;\\r\\nattribute vec4 accelerationEndSize;\\r\\nattribute vec4 spinStartSpinSpeed;\\r\\nattribute vec4 colorMult;\\r\\n\\r\\n// Outgoing variables to fragment shader\\r\\nvarying vec2 outputTexcoord;\\r\\nvarying float outputPercentLife;\\r\\nvarying vec4 outputColorMult;\\r\\n\\r\\nvoid main() {\\r\\n    float lifeTime = uvLifeTimeFrameStart.z;\\r\\n    float frameStart = uvLifeTimeFrameStart.w;\\r\\n    vec3 velocity = (modelMatrix * vec4(velocityStartSize.xyz,\\r\\n                                 0.)).xyz + worldVelocity;\\r\\n    float startSize = velocityStartSize.w;\\r\\n    vec3 acceleration = (modelMatrix * vec4(accelerationEndSize.xyz,\\r\\n                                     0)).xyz + worldAcceleration;\\r\\n    float endSize = accelerationEndSize.w;\\r\\n    float spinStart = spinStartSpinSpeed.x;\\r\\n    float spinSpeed = spinStartSpinSpeed.y;\\r\\n\\r\\n    float localTime = mod((time - timeOffset - startTime), timeRange);\\r\\n    float percentLife = localTime / lifeTime;\\r\\n\\r\\n    float frame = mod(floor(localTime / frameDuration + frameStart),\\r\\n                     numFrames);\\r\\n    float uOffset = frame / numFrames;\\r\\n    float u = uOffset + (uv.x + 0.5) * (1. / numFrames);\\r\\n\\r\\n    outputTexcoord = vec2(u, uv.y + 0.5);\\r\\n    outputColorMult = colorMult;\\r\\n\\r\\n    vec3 basisX = viewInverse[0].xyz;\\r\\n    vec3 basisZ = viewInverse[1].xyz;\\r\\n    vec4 vertexWorld = modelMatrix * vec4(position, 1.0);\\r\\n\\r\\n    float size = mix(startSize, endSize, percentLife);\\r\\n    size = (percentLife < 0. || percentLife > 1.) ? 0. : size;\\r\\n    float s = sin(spinStart + spinSpeed * localTime);\\r\\n    float c = cos(spinStart + spinSpeed * localTime);\\r\\n\\r\\n    vec2 rotatedPoint = vec2(uv.x * c + uv.y * s, -uv.x * s + uv.y * c);\\r\\n    vec3 localPosition = vec3(basisX * rotatedPoint.x + basisZ * rotatedPoint.y) * size +\\r\\n                        velocity * localTime +\\r\\n                        acceleration * localTime * localTime +\\r\\n                        vertexWorld.xyz;\\r\\n\\r\\n    outputPercentLife = percentLife;\\r\\n    gl_Position = projectionMatrix * viewMatrix * vec4(localPosition, 1.);\\r\\n\\r\\n}\";\r\n\r\n\tvar orientedParticleInstancedVertexShader = \"// source: https://github.com/greggman/tdl/blob/master/tdl/particles.js#L63\\r\\n\\r\\n// 3D (oriented) vertex shader\\r\\nuniform mat4 worldViewProjection;\\r\\nuniform mat4 world;\\r\\nuniform vec3 worldVelocity;\\r\\nuniform vec3 worldAcceleration;\\r\\nuniform float timeRange;\\r\\nuniform float time;\\r\\nuniform float timeOffset;\\r\\nuniform float frameDuration;\\r\\nuniform float numFrames;\\r\\n\\r\\n// Incoming vertex attributes\\r\\nattribute vec3 offset;\\r\\nattribute vec4 uvLifeTimeFrameStart; // uv, lifeTime, frameStart\\r\\nattribute float startTime;    // position.xyz, startTime\\r\\nattribute vec4 velocityStartSize;    // velocity.xyz, startSize\\r\\nattribute vec4 accelerationEndSize;  // acceleration.xyz, endSize\\r\\nattribute vec4 spinStartSpinSpeed;   // spinStart.x, spinSpeed.y\\r\\nattribute vec4 orientation;          // orientation quaternion\\r\\nattribute vec4 colorMult;            // multiplies color and ramp textures\\r\\n\\r\\n// Outgoing variables to fragment shader\\r\\nvarying vec2 outputTexcoord;\\r\\nvarying float outputPercentLife;\\r\\nvarying vec4 outputColorMult;\\r\\nvoid main() {\\r\\nfloat lifeTime = uvLifeTimeFrameStart.z;\\r\\nfloat frameStart = uvLifeTimeFrameStart.w;\\r\\nvec3 velocity = (world * vec4(velocityStartSize.xyz,\\r\\n                              0.)).xyz + worldVelocity;\\r\\nfloat startSize = velocityStartSize.w;\\r\\nvec3 acceleration = (world * vec4(accelerationEndSize.xyz,\\r\\n                                  0)).xyz + worldAcceleration;\\r\\nfloat endSize = accelerationEndSize.w;\\r\\nfloat spinStart = spinStartSpinSpeed.x;\\r\\nfloat spinSpeed = spinStartSpinSpeed.y;\\r\\n\\r\\nfloat localTime = mod((time - timeOffset - startTime), timeRange);\\r\\nfloat percentLife = localTime / lifeTime;\\r\\n\\r\\nfloat frame = mod(floor(localTime / frameDuration + frameStart),\\r\\n                  numFrames);\\r\\nfloat uOffset = frame / numFrames;\\r\\nfloat u = uOffset + (uv.x + 0.5) * (1. / numFrames);\\r\\n\\r\\noutputTexcoord = vec2(u, uv.y + 0.5);\\r\\noutputColorMult = colorMult;\\r\\n\\r\\nfloat size = mix(startSize, endSize, percentLife);\\r\\nsize = (percentLife < 0. || percentLife > 1.) ? 0. : size;\\r\\nfloat s = sin(spinStart + spinSpeed * localTime);\\r\\nfloat c = cos(spinStart + spinSpeed * localTime);\\r\\n\\r\\nvec4 rotatedPoint = vec4((uv.x * c + uv.y * s) * size, 0.,\\r\\n                         (uv.x * s - uv.y * c) * size, 1.);\\r\\nvec3 center = velocity * localTime +\\r\\n              acceleration * localTime * localTime +\\r\\n              position +offset;\\r\\n\\r\\nvec4 q2 = orientation + orientation;\\r\\nvec4 qx = orientation.xxxw * q2.xyzx;\\r\\nvec4 qy = orientation.xyyw * q2.xyzy;\\r\\nvec4 qz = orientation.xxzw * q2.xxzz;\\r\\n\\r\\nmat4 localMatrix = mat4(\\r\\n    (1.0 - qy.y) - qz.z,\\r\\n    qx.y + qz.w,\\r\\n    qx.z - qy.w,\\r\\n    0,\\r\\n\\r\\n    qx.y - qz.w,\\r\\n    (1.0 - qx.x) - qz.z,\\r\\n    qy.z + qx.w,\\r\\n    0,\\r\\n\\r\\n    qx.z + qy.w,\\r\\n    qy.z - qx.w,\\r\\n    (1.0 - qx.x) - qy.y,\\r\\n    0,\\r\\n\\r\\n    center.x, center.y, center.z, 1);\\r\\nrotatedPoint = localMatrix * rotatedPoint;\\r\\noutputPercentLife = percentLife;\\r\\ngl_Position = projectionMatrix * modelViewMatrix * rotatedPoint;\\r\\n}\";\r\n\r\n\tvar particleFragmentShader = \"// source: https://github.com/greggman/tdl/blob/master/tdl/particles.js#L225\\r\\n\\r\\n#ifdef GL_ES\\r\\nprecision mediump float;\\r\\n#endif\\r\\nuniform sampler2D rampSampler;\\r\\nuniform sampler2D colorSampler;\\r\\n\\r\\n// Incoming variables from vertex shader\\r\\nvarying vec2 outputTexcoord;\\r\\nvarying float outputPercentLife;\\r\\nvarying vec4 outputColorMult;\\r\\n\\r\\nvoid main() {\\r\\n    vec4 colorMult = texture2D(rampSampler, vec2(outputPercentLife, 0.5)) * outputColorMult;\\r\\n    gl_FragColor = texture2D(colorSampler, outputTexcoord) * colorMult;\\r\\n    // For debugging: requires setup of some uniforms and vertex\\r\\n    // attributes to be commented out to avoid GL errors\\r\\n    //gl_FragColor = vec4(1., 0., 0., 1.);\\r\\n}\";\r\n\r\n\t// source: https://github.com/greggman/tdl/blob/master/tdl/particles.js\r\n\r\n\tfunction ParticleEmitter ( particleSystem, opt_texture, opt_clock ) {\r\n\r\n\t\tTHREE.Mesh.call( this );\r\n\r\n\t\topt_clock = opt_clock || particleSystem.timeSource_;\r\n\r\n\t\t//TODO make alternative to instanced buffer\r\n\t\t//this.particleBuffer_ = new THREE.BufferGeometry();\r\n\t\t//this.indexBuffer_ = [];\r\n\r\n\t\tthis.particleBuffer_ = new THREE.InstancedBufferGeometry();\r\n\t\tthis.interleavedBuffer = new THREE.InterleavedBuffer();\r\n\r\n\t\tthis.numParticles_ = 0;\r\n\r\n\t\tthis.rampTexture_ = particleSystem.defaultRampTexture;\r\n\t\tthis.colorTexture_ = opt_texture || particleSystem.defaultColorTexture;\r\n\r\n\t\tthis.particleSystem = particleSystem;\r\n\r\n\t\tthis.timeSource_ = opt_clock;\r\n\r\n\t\tthis.setState( THREE.NormalBlending );\r\n\r\n\t}\r\n\tParticleEmitter.prototype = Object.create( THREE.Mesh.prototype );\r\n\r\n\tParticleEmitter.prototype.constructor = ParticleEmitter;\r\n\r\n\tParticleEmitter.prototype.setTranslation = function ( x, y, z ) {\r\n\r\n\t        this.position.x = x;\r\n\t        this.position.y = y;\r\n\t        this.position.z = z;\r\n\r\n\t};\r\n\r\n\tParticleEmitter.prototype.setState = function ( stateId ) {\r\n\r\n\t        this.blendFunc_ = stateId;\r\n\r\n\t};\r\n\r\n\tParticleEmitter.prototype.setColorRamp = function ( colorRamp ) {\r\n\r\n\t\tvar width = colorRamp.length / 4;\r\n\t\tif (width % 1 != 0) {\r\n\r\n\t\t\tthrow 'colorRamp must have multiple of 4 entries';\r\n\r\n\t\t}\r\n\r\n\t\tif (this.rampTexture_ == this.particleSystem.defaultRampTexture) {\r\n\r\n\t\t\tthis.rampTexture_ = null;\r\n\r\n\t\t}\r\n\r\n\t\tthis.rampTexture_ = this.particleSystem.createTextureFromFloats( width, 1, colorRamp, this.rampTexture_ );\r\n\r\n\t};\r\n\r\n\tParticleEmitter.prototype.validateParameters = function ( parameters ) {\r\n\r\n\t\tvar defaults = new ParticleSpec();\r\n\r\n\t\tfor ( var key in parameters ) {\r\n\r\n\t\t\tif ( typeof defaults[ key ] === 'undefined' ) {\r\n\r\n\t\t\t\tthrow 'unknown particle parameter \"' + key + '\"';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var key in defaults ) {\r\n\r\n\t\t\tif ( typeof parameters[ key ] === 'undefined' ) {\r\n\r\n\t\t\t\tparameters[ key ] = defaults[ key ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tParticleEmitter.prototype.createParticles_ = function( firstParticleIndex, numParticles, parameters, opt_perParticleParamSetter ) {\r\n\r\n\t    var interleaveBufferData = this.interleavedBuffer.array;\r\n\r\n\t    this.billboard_ = parameters.billboard;\r\n\r\n\t    var random = this.particleSystem.randomFunction_;\r\n\r\n\t    var plusMinus = function ( range ) {\r\n\r\n\t        return ( random() - 0.5 ) * range * 2;\r\n\r\n\t    };\r\n\r\n\t    // TODO: change to not allocate.\r\n\t    var plusMinusVector = function ( range ) {\r\n\r\n\t        var v = [];\r\n\r\n\t        for (var ii = 0; ii < range.length; ++ ii) {\r\n\r\n\t            v.push( plusMinus( range[ ii ] ) );\r\n\r\n\t        }\r\n\r\n\t        return v;\r\n\r\n\t    };\r\n\r\n\t    for ( var ii = 0; ii < numParticles; ++ ii ) {\r\n\r\n\t        if ( opt_perParticleParamSetter ) {\r\n\r\n\t            opt_perParticleParamSetter( ii, parameters );\r\n\r\n\t        }\r\n\r\n\t        var pLifeTime = parameters.lifeTime;\r\n\t        var pStartTime = ( parameters.startTime === null ) ? ( ii * parameters.lifeTime / numParticles ) : parameters.startTime;\r\n\t        var pFrameStart = parameters.frameStart + plusMinus(parameters.frameStartRange);\r\n\t        var pPosition = new THREE.Vector3().addVectors( new THREE.Vector3().fromArray(parameters.position), new THREE.Vector3().fromArray(plusMinusVector(parameters.positionRange)));\r\n\t        var pVelocity = new THREE.Vector3().addVectors( new THREE.Vector3().fromArray(parameters.velocity), new THREE.Vector3().fromArray(plusMinusVector(parameters.velocityRange)));\r\n\t        var pAcceleration = new THREE.Vector3().addVectors( new THREE.Vector3().fromArray(parameters.acceleration), new THREE.Vector3().fromArray( plusMinusVector( parameters.accelerationRange )));\r\n\t        var pColorMult = new THREE.Vector4().addVectors( new THREE.Vector4().fromArray(parameters.colorMult), new THREE.Vector4().fromArray(plusMinusVector( parameters.colorMultRange )));\r\n\t        var pSpinStart = parameters.spinStart + plusMinus(parameters.spinStartRange);\r\n\t        var pSpinSpeed = parameters.spinSpeed + plusMinus(parameters.spinSpeedRange);\r\n\t        var pStartSize = parameters.startSize + plusMinus(parameters.startSizeRange);\r\n\t        var pEndSize = parameters.endSize + plusMinus(parameters.endSizeRange);\r\n\t        var pOrientation = new THREE.Vector4().fromArray(parameters.orientation);\r\n\r\n\t        for (var jj = 0; jj < 1; ++jj) {\r\n\r\n\t            var offset0 = LAST_IDX * jj + ( ii * LAST_IDX * 4 ) + ( firstParticleIndex * LAST_IDX * 4 );\r\n\t            var offset1 = offset0 + 1;\r\n\t            var offset2 = offset0 + 2;\r\n\t            var offset3 = offset0 + 3;\r\n\r\n\r\n\t            interleaveBufferData[POSITION_START_TIME_IDX + offset0] = pPosition.x;\r\n\t            interleaveBufferData[POSITION_START_TIME_IDX + offset1] = pPosition.y;\r\n\t            interleaveBufferData[POSITION_START_TIME_IDX + offset2] = pPosition.z;\r\n\t            interleaveBufferData[POSITION_START_TIME_IDX + offset3] = pStartTime;\r\n\r\n\t            interleaveBufferData[UV_LIFE_TIME_FRAME_START_IDX + offset0] = CORNERS_[jj][0];\r\n\t            interleaveBufferData[UV_LIFE_TIME_FRAME_START_IDX + offset1] = CORNERS_[jj][1];\r\n\t            interleaveBufferData[UV_LIFE_TIME_FRAME_START_IDX + offset2] = pLifeTime;\r\n\t            interleaveBufferData[UV_LIFE_TIME_FRAME_START_IDX + offset3] = pFrameStart;\r\n\r\n\t            interleaveBufferData[VELOCITY_START_SIZE_IDX + offset0] = pVelocity.x;\r\n\t            interleaveBufferData[VELOCITY_START_SIZE_IDX + offset1] = pVelocity.y;\r\n\t            interleaveBufferData[VELOCITY_START_SIZE_IDX + offset2] = pVelocity.z;\r\n\t            interleaveBufferData[VELOCITY_START_SIZE_IDX + offset3] = pStartSize;\r\n\r\n\t            interleaveBufferData[ACCELERATION_END_SIZE_IDX + offset0] = pAcceleration.x;\r\n\t            interleaveBufferData[ACCELERATION_END_SIZE_IDX + offset1] = pAcceleration.y;\r\n\t            interleaveBufferData[ACCELERATION_END_SIZE_IDX + offset2] = pAcceleration.z;\r\n\t            interleaveBufferData[ACCELERATION_END_SIZE_IDX + offset3] = pEndSize;\r\n\r\n\t            interleaveBufferData[SPIN_START_SPIN_SPEED_IDX + offset0] = pSpinStart;\r\n\t            interleaveBufferData[SPIN_START_SPIN_SPEED_IDX + offset1] = pSpinSpeed;\r\n\t            interleaveBufferData[SPIN_START_SPIN_SPEED_IDX + offset2] = 0;\r\n\t            interleaveBufferData[SPIN_START_SPIN_SPEED_IDX + offset3] = 0;\r\n\r\n\t            interleaveBufferData[ORIENTATION_IDX + offset0] = pOrientation.x;\r\n\t            interleaveBufferData[ORIENTATION_IDX + offset1] = pOrientation.y;\r\n\t            interleaveBufferData[ORIENTATION_IDX + offset2] = pOrientation.z;\r\n\t            interleaveBufferData[ORIENTATION_IDX + offset3] = pOrientation.w;\r\n\r\n\t            interleaveBufferData[COLOR_MULT_IDX + offset0] = pColorMult.x;\r\n\t            interleaveBufferData[COLOR_MULT_IDX + offset1] = pColorMult.y;\r\n\t            interleaveBufferData[COLOR_MULT_IDX + offset2] = pColorMult.z;\r\n\t            interleaveBufferData[COLOR_MULT_IDX + offset3] = pColorMult.w;\r\n\r\n\t        }\r\n\r\n\t    }\r\n\r\n\t    this.interleavedBuffer.needsUpdate = true;\r\n\r\n\t    this.material.uniforms.worldVelocity.value = new THREE.Vector3(parameters.worldVelocity[0], parameters.worldVelocity[1], parameters.worldVelocity[2]);\r\n\t    this.material.uniforms.worldAcceleration.value = new THREE.Vector3(parameters.worldAcceleration[0], parameters.worldAcceleration[1], parameters.worldAcceleration[2]);\r\n\t    this.material.uniforms.timeRange.value = parameters.timeRange;\r\n\t    this.material.uniforms.frameDuration.value = parameters.frameDuration;\r\n\t    this.material.uniforms.numFrames.value = parameters.numFrames;\r\n\t    this.material.uniforms.rampSampler.value = this.rampTexture_;\r\n\t    this.material.uniforms.colorSampler.value = this.colorTexture_;\r\n\r\n\t    this.material.blending = this.blendFunc_;\r\n\r\n\t};\r\n\r\n\tParticleEmitter.prototype.allocateParticles_ = function ( numParticles, parameters ) {\r\n\r\n\t\tif ( this.numParticles_ != numParticles ) {\r\n\r\n\t        var numIndices = 6 * numParticles;\r\n\r\n\t\t\tif (numIndices > 65536 && THREE.BufferGeometry.MaxIndex < 65536) {\r\n\r\n\t\t\t\tthrow \"can't have more than 10922 particles per emitter\";\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar vertexBuffer = new THREE.InterleavedBuffer( new Float32Array([\r\n\t\t\t\t// Front\r\n\t\t\t\t0, 0, 0, 0, -0.5, -0.5, 0, 0,\r\n\t\t\t\t0, 0, 0, 0, 0.5, -0.5, 0, 0,\r\n\t\t\t\t0, 0, 0, 0, 0.5, 0.5, 0, 0,\r\n\t\t\t\t0, 0, 0, 0, -0.5, 0.5, 0, 0\r\n\t\t\t]), 8);\r\n\r\n\r\n\t\t\t// Use vertexBuffer, starting at offset 0, 3 items in position attribute\r\n\t\t\tvar positions = new THREE.InterleavedBufferAttribute( vertexBuffer, 3, 0 );\r\n\t\t\tthis.particleBuffer_.addAttribute( 'position', positions );\r\n\t\t\t// Use vertexBuffer, starting at offset 4, 2 items in uv attribute\r\n\t\t\tvar uvs = new THREE.InterleavedBufferAttribute( vertexBuffer, 2, 4 );\r\n\t\t\tthis.particleBuffer_.addAttribute( 'uv', uvs );\r\n\r\n\t\t\tvar indices = new Uint16Array([\r\n\r\n\t\t\t\t0, 1, 2,\r\n\t\t\t\t0, 2, 3\r\n\r\n\t\t\t]);\r\n\r\n\t\t\tthis.particleBuffer_.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\r\n\t\t\tthis.numParticles_ = numParticles;\r\n\t\t\tthis.interleavedBuffer = new THREE.InstancedInterleavedBuffer( new Float32Array( numParticles * singleParticleArray_.byteLength ), LAST_IDX, 1 ).setDynamic( true );\r\n\r\n\t\t\tthis.particleBuffer_.addAttribute( 'position', new THREE.InterleavedBufferAttribute(this.interleavedBuffer, 3, POSITION_START_TIME_IDX));\r\n\t\t\tthis.particleBuffer_.addAttribute( 'startTime', new THREE.InterleavedBufferAttribute(this.interleavedBuffer, 1, 3));\r\n\t\t\tthis.particleBuffer_.addAttribute( 'uvLifeTimeFrameStart', new THREE.InterleavedBufferAttribute(this.interleavedBuffer, 4, UV_LIFE_TIME_FRAME_START_IDX));\r\n\t\t\tthis.particleBuffer_.addAttribute( 'velocityStartSize', new THREE.InterleavedBufferAttribute(this.interleavedBuffer, 4, VELOCITY_START_SIZE_IDX));\r\n\t\t\tthis.particleBuffer_.addAttribute( 'accelerationEndSize', new THREE.InterleavedBufferAttribute(this.interleavedBuffer, 4, ACCELERATION_END_SIZE_IDX));\r\n\t\t\tthis.particleBuffer_.addAttribute( 'spinStartSpinSpeed', new THREE.InterleavedBufferAttribute(this.interleavedBuffer, 4, SPIN_START_SPIN_SPEED_IDX));\r\n\t\t\tthis.particleBuffer_.addAttribute( 'orientation', new THREE.InterleavedBufferAttribute(this.interleavedBuffer, 4, ORIENTATION_IDX));\r\n\t\t\tthis.particleBuffer_.addAttribute( 'colorMult', new THREE.InterleavedBufferAttribute(this.interleavedBuffer, 4, COLOR_MULT_IDX));\r\n\r\n\t\t\t//TODO Fix boundingSphere\r\n\t\t\tthis.particleBuffer_.boundingSphere = new THREE.Sphere();\r\n\r\n\t\t\tvar uniforms = {\r\n\r\n\t\t\t\t//world: { type: 'm4', value: this.matrixWorld },\r\n\t\t\t\tviewInverse: { type: 'm4', value: this.particleSystem.camera.matrixWorld },\r\n\t\t\t\tworldVelocity: { type: 'v3', value: null },\r\n\t\t\t\tworldAcceleration: { type: 'v3', value: null },\r\n\t\t\t\ttimeRange: { type: 'f', value: null },\r\n\t\t\t\ttime: { type: 'f', value: null },\r\n\t\t\t\ttimeOffset: { type: 'f', value: null },\r\n\t\t\t\tframeDuration: { type: 'f', value: null },\r\n\t\t\t\tnumFrames: { type: 'f', value: null },\r\n\t\t\t\trampSampler: { type: \"t\", value: this.rampTexture_ },\r\n\t\t\t\tcolorSampler: { type: \"t\", value: this.colorTexture_ }\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar material = new THREE.ShaderMaterial({\r\n\r\n\t\t\t\tuniforms: uniforms,\r\n\t\t\t\tvertexShader: ( parameters.billboard ) ? billboardParticleInstancedVertexShader : orientedParticleInstancedVertexShader,\r\n\t\t\t\tfragmentShader: particleFragmentShader,\r\n\t\t\t\tside: (this.billboard_)? THREE.DoubleSide:THREE.FrontSide,\r\n\t\t\t\tblending: this.blendFunc_,\r\n\t\t\t\tdepthTest: true,\r\n\t\t\t\tdepthWrite: false,\r\n\t\t\t\ttransparent: true\r\n\r\n\t\t\t});\r\n\r\n\r\n\t\t\tthis.geometry = this.particleBuffer_;\r\n\t\t\tthis.material = material;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tParticleEmitter.prototype.setParameters = function ( parameters, opt_perParticleParamSetter ) {\r\n\r\n\t\tthis.validateParameters ( parameters );\r\n\r\n\t\tvar numParticles = parameters.numParticles;\r\n\r\n\t\tthis.allocateParticles_ ( numParticles, parameters );\r\n\t\tthis.createParticles_ ( 0, numParticles, parameters, opt_perParticleParamSetter );\r\n\r\n\t};\r\n\r\n\tParticleEmitter.prototype.draw = function ( world, viewProjection, timeOffset ) {\r\n\r\n\t\tvar uniforms = this.material.uniforms;\r\n\r\n\t\tuniforms.time.value = this.timeSource_();\r\n\t\tuniforms.timeOffset.value = timeOffset;\r\n\r\n\t};\r\n\r\n\tParticleEmitter.prototype.createOneShot = function () {\r\n\r\n\t\treturn new OneShot( this, this.particleSystem.scene );\r\n\r\n\t};\r\n\r\n\tParticleEmitter.prototype.clone = function ( object ) {\r\n\r\n\t\tif ( object === undefined ) object = this.particleSystem.createParticleEmitter( this.colorTexture_, this.timeSource_);\r\n\r\n\t\tobject.geometry = this.geometry;\r\n\t\tobject.material = this.material.clone();\r\n\t\tobject.material.uniforms.viewInverse.value = this.particleSystem.camera.matrixWorld;\r\n\t\tobject.material.uniforms.rampSampler.value = this.rampTexture_;\r\n\t\tobject.material.uniforms.colorSampler.value = this.colorTexture_;\r\n\r\n\t\tTHREE.Mesh.prototype.clone.call( this, object );\r\n\r\n\t\treturn object;\r\n\r\n\t};\r\n\r\n\t// source: https://github.com/greggman/tdl/blob/master/tdl/particles.js\r\n\r\n\tfunction Trail ( particleSystem, maxParticles, parameters, opt_texture, opt_perParticleParamSetter, opt_clock ) {\r\n\r\n\t\tParticleEmitter.call( this, particleSystem, opt_texture, opt_clock );\r\n\r\n\t\tthis.allocateParticles_( maxParticles, parameters );\r\n\t\tthis.validateParameters( parameters );\r\n\r\n\t\tthis.parameters = parameters;\r\n\t\tthis.perParticleParamSetter = opt_perParticleParamSetter;\r\n\t\tthis.birthIndex_ = 0;\r\n\t\tthis.maxParticles_ = maxParticles;\r\n\r\n\t}\r\n\r\n\tTrail.prototype = Object.create( ParticleEmitter.prototype );\r\n\r\n\tTrail.prototype.constructor = Trail;\r\n\r\n\tTrail.prototype.birthParticles = function ( position ) {\r\n\r\n\t\tvar numParticles = this.parameters.numParticles;\r\n\t\tthis.parameters.startTime = this.timeSource_();\r\n\t\tthis.parameters.position = position;\r\n\r\n\t\twhile ( this.birthIndex_ + numParticles >= this.maxParticles_ ) {\r\n\r\n\t\t\tvar numParticlesToEnd = this.maxParticles_ - this.birthIndex_;\r\n\r\n\t\t\tthis.createParticles_( this.birthIndex_, numParticlesToEnd,\tthis.parameters, this.perParticleParamSetter );\r\n\t\t\tnumParticles -= numParticlesToEnd;\r\n\r\n\t\t\tthis.birthIndex_ = 0;\r\n\r\n\t\t}\r\n\r\n\t\tthis.createParticles_( this.birthIndex_, numParticles, this.parameters, this.perParticleParamSetter );\r\n\r\n\t\tif ( this.birthIndex_ === 0 ) {\r\n\r\n\t\t\tthis.particleSystem.scene.add( this );\r\n\r\n\t\t}\r\n\r\n\t\tthis.birthIndex_ += numParticles;\r\n\r\n\r\n\t};\r\n\r\n\t// source: https://github.com/greggman/tdl/blob/master/tdl/particles.js\r\n\r\n\tTHREE.ParticleSystem = function ( scene, camera, opt_clock, opt_randomFunction ) {\r\n\r\n\t\tthis.scene = scene;\r\n\t\tthis.camera = camera;\r\n\r\n\t\tthis.drawables_ = [];\r\n\r\n\t\tvar pixelBase = [ 0, 0.20, 0.70, 1, 0.70, 0.20, 0, 0 ];\r\n\t\tvar pixels = [];\r\n\r\n\t\tfor ( var yy = 0; yy < 8; ++ yy ) {\r\n\r\n\t\t\tfor ( var xx = 0; xx < 8; ++ xx ) {\r\n\r\n\t\t\t\tvar pixel = pixelBase[ xx ] * pixelBase[ yy ];\r\n\t\t\t\tpixels.push( pixel, pixel, pixel, pixel );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar colorTexture = this.createTextureFromFloats( 8, 8, pixels );\r\n\t\tvar rampTexture = this.createTextureFromFloats( 2, 1, [ 1, 1, 1, 1, 1, 1, 1, 0 ] );\r\n\r\n\t\tthis.now_ = new Date();\r\n\t\tthis.timeBase_ = new Date();\r\n\r\n\t\tif ( opt_clock ) {\r\n\r\n\t\t\tthis.timeSource_ = opt_clock;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.timeSource_ = createDefaultClock_( this );\r\n\r\n\t\t}\r\n\r\n\t\tthis.randomFunction_ = opt_randomFunction || function () {\r\n\r\n\t\t\treturn Math.random();\r\n\r\n\t\t};\r\n\r\n\t\tthis.defaultColorTexture = colorTexture;\r\n\t\tthis.defaultRampTexture = rampTexture;\r\n\r\n\t}\r\n\r\n\tTHREE.ParticleSystem.prototype.createTextureFromFloats = function ( width, height, pixels, opt_texture ) {\r\n\r\n\t\tvar texture = null;\r\n\t\tif ( opt_texture != null ) {\r\n\r\n\t\t\ttexture = opt_texture;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar data = new Uint8Array( pixels.length );\r\n\t\t\tvar t;\r\n\t\t\tfor ( var i = 0; i < pixels.length; i ++ ) {\r\n\r\n\t\t\t\tt = pixels[ i ] * 255.;\r\n\t\t\t\tdata[ i ] = t;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttexture = new THREE.DataTexture( data, width, height, THREE.RGBAFormat );\r\n\t\t\ttexture.minFilter = THREE.LinearFilter;\r\n\t\t\ttexture.magFilter = THREE.LinearFilter;\r\n\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\treturn texture;\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t};\r\n\r\n\tTHREE.ParticleSystem.prototype.createParticleEmitter = function ( opt_texture, opt_clock ) {\r\n\r\n\t\tvar emitter = new ParticleEmitter( this, opt_texture, opt_clock );\r\n\t\tthis.drawables_.push( emitter );\r\n\r\n\t\treturn emitter;\r\n\r\n\t};\r\n\r\n\tTHREE.ParticleSystem.prototype.createTrail = function ( maxParticles, parameters, opt_texture, opt_perParticleParamSetter, opt_clock ) {\r\n\r\n\t\tvar trail = new Trail( this, maxParticles, parameters, opt_texture, opt_perParticleParamSetter,\topt_clock );\r\n\t\tthis.drawables_.push( trail );\r\n\r\n\t\treturn trail;\r\n\r\n\t};\r\n\r\n\tTHREE.ParticleSystem.prototype.draw = function ( viewProjection, world, viewInverse ) {\r\n\r\n\t\tthis.now_ = new Date();\r\n\r\n\t\tfor ( var ii = 0; ii < this.drawables_.length; ++ ii ) {\r\n\r\n\t\t\tthis.drawables_[ ii ].draw( world, viewProjection, 0 );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n})));\r\n"]}